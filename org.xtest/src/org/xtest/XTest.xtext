// Michael Barry
grammar org.xtest.XTest with org.eclipse.xtext.xbase.Xbase

generate xTest "http://www.xtest.org/"
	
import "http://www.eclipse.org/xtend"
import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/common/JavaVMTypes"

// Top-level expression
Body returns XBlockExpression:
	{Body}
	(fileparam+=FileParam ';'?)*
	(imports+=Import ';'?)*
	(expressions+=XExpressionInsideBlock ';'?)*;

// From Xtend 2.3
Import returns XtendImport: 
	'import' (
		(static?='static' extension?='extension'? importedType=[JvmType|QualifiedName] '.' '*') 
		| importedType=[JvmType|QualifiedName] 
		| importedNamespace=QualifiedNamespaceWithWildcard)
;
	              
QualifiedNamespaceWithWildcard: QualifiedName '.' '*';

FileParam:
	// Currently, only boolean literals are supported
	=>feature=[JvmEnumerationLiteral] ':' value=XBooleanLiteral;


UniqueName:
	{UniqueName} (name=(STRING|ID))? (identifier=XParenthesizedExpression)?
;

XTestExpression returns XExpression:
	{XTestExpression}
	('xsuite'|'xtest') name=UniqueName (expression=XBlockExpression);
	
XAssertExpression returns XExpression:
	{XAssertExpression}
	'assert' actual=XExpression (=>'throws' throws=JvmTypeReference)?
;
XSafeExpression returns XExpression:
	{XSafeExpression} '?' actual=XExpression
;

// Methods
Parameter returns XtendParameter:
	parameterType=JvmTypeReference varArg?='...'? name=ValidID;
	
XMethodDef returns XtendFunction:
	{XMethodDef}
	('def' & (static?='static')?)
	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	 (returnType=JvmTypeReference)?
	 name=ValidID 
	 ('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')')?
	 expression=XBlockExpression;
	 
XMethodDefExpression returns XExpression:
	{XMethodDefExpression} method = XMethodDef;

// Hook our newly defined expressions into XBase as new kinds of expressions
XPrimaryExpression returns XExpression:
	// Keep old expressions
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression |
	// Add new expressions
	XTestExpression |
	XAssertExpression |
	XSafeExpression |
	XMethodDefExpression;

// Add static member setting support to Xbase
StaticEquals:':=';
XFeatureCall returns XExpression:
	// Same as Xbase...
	{XFeatureCall}
	(declaringType=[JvmDeclaredType|StaticQualifier])?
	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
	(feature=[JvmIdentifiableElement|IdOrSuper]|'class') 
	(=>explicitOperationCall?='(' 
		(
		    featureCallArguments+=XShortClosure
		  |	featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		)? 
	')')?
	=>featureCallArguments+=XClosure?
	// ... Except with this additional optional clause that allows static members to be set with := operator
	({XAssignment.assignable = current} StaticEquals value = XAssignment)?;