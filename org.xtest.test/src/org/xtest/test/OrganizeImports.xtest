/* File-specific parameters */
runWhileEditing: false
import org.eclipse.xtext.resource.XtextResource
import org.^xtest.XTestRunner

import static org.^xtest.test.AssertHelpers.*
import static org.^xtest.test.XTestRegressionTests.*

val helper = [String input|{
    val result = try XTestRunner::parse(input, injector) catch (Exception e) null
	val with = organizeImports.getOrganizedImportSection(result.eResource as XtextResource)
	val region = organizeImports.computeRegion(result.eResource as XtextResource)
	input.substring(0,region.getOffset)+with+input.substring(region.getOffset+region.getLength)
}]

xtest noImports {
	val input = '
runWhileEditing: true
xsuite test {
	xtest case {
		assert 1 == 1 
	}
}'
	assertEqualsNormalizeLinebreak('
runWhileEditing: true
xsuite test {
	xtest case {
		assert 1 == 1 
	}
}',helper.apply(input))
}
 
xtest splatToSingle {
	val input = '
import java.util.*
assert new ArrayList<String>() != null
'
	assertEqualsNormalizeLinebreak('
import java.util.ArrayList

assert new ArrayList<String>() != null
',helper.apply(input))
}

xtest sameLine {
	val input = '
runWhileEditing: true
import java.util.*; assert new ArrayList<String>() != null
'
	assertEqualsNormalizeLinebreak('
runWhileEditing: true
import java.util.ArrayList

assert new ArrayList<String>() != null
',helper.apply(input))
}

xtest javaLangNotImported {
	val input = '
runWhileEditing: true
import java.util.*; assert new String() != null
'
	assertEqualsNormalizeLinebreak('
runWhileEditing: true
assert new String() != null
',helper.apply(input))
}

xtest lineBreakAtBeginning {
	val input = '
/* comment */
runWhileEditing: true; \rimport java.util.*; assert new ArrayList<String>() != null
'
	assertEqualsNormalizeLinebreak('
/* comment */
runWhileEditing: true
import java.util.ArrayList

assert new ArrayList<String>() != null
',helper.apply(input))
}


xtest lineBreakAtBeginning2 {
	val input = 
'/* File-specific parameters */
import helpers.*
val a = new SUT'
	assertEqualsNormalizeLinebreak(
'/* File-specific parameters */
import helpers.SUT

val a = new SUT',helper.apply(input))
} 

xtest escapedStaticImport {
	val input = 
'import static org.^xtest.test.XTestRegressionTests.*
val a = interpreter'
	assertEqualsNormalizeLinebreak(
'import static org.^xtest.test.XTestRegressionTests.*

val a = interpreter',helper.apply(input))
}


xtest empty {
	val input = 
''
	assertEqualsNormalizeLinebreak(
'',helper.apply(input))
} 