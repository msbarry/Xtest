/* File-specific parameters */
runWhileEditing: false
// TODO - when Guice fixes memory leak, re-enable running on save
// (http://code.google.com/p/google-guice/issues/detail?id=288)
runOnSave: true
 
import static org.junit.Assert.*
import static extension org.^xtest.test.TestUtils.*
import java.util.List

// First make sure that the custom type conformance assertion method works as expected 
xtest "type conformance utility tests" {
	xtest "assertIsValidAndTypeConformsTo" {
		xtest "simple success int" { 
			assertIsValidAndTypeConformsTo("1", Integer::class)
		}
		xtest "simple success int->number" { 
			assertIsValidAndTypeConformsTo("1", Number::class)
		}
		xtest "simple success string" { 
			assertIsValidAndTypeConformsTo("'s'", String::class)
		}
		xtest "validation error" { 
			assert assertIsValidAndTypeConformsTo("-", Integer::class) throws AssertionError
		}
		xtest "catches type mismatch" {
			assert assertIsValidAndTypeConformsTo("1", String::class) throws AssertionError
		}
	}
	
	
	xtest "assertIsValidAndVoidType" {
		xtest "simple success int" { 
			assertIsValidAndVoidType("val a = 1")
		}
		xtest "validation error" { 
			assert assertIsValidAndVoidType("val = 1") throws AssertionError
		}
		xtest "not void" { 
			assert assertIsValidAndVoidType("1") throws AssertionError
		}
	}
}

// Now use it to test method type computation
xtest "declared" {
	xtest { assertIsValidAndTypeConformsTo("def Integer func {1}; func", Integer::class) } 
	xtest { assertIsValidAndTypeConformsTo("def static Integer func {1}; func", Integer::class) } 
	xtest { assertIsValidAndTypeConformsTo("def String func {'a'}; func", String::class) } 
	xtest { assertIsValidAndVoidType("def void func {val a = 1}; func")} 
	xtest { assertIsValidAndVoidType("def void func {1}; func")} 
}
xtest "chooses correct method based on type when multiple names match" {
	xtest { assertIsValidAndTypeConformsTo("def int func(int s) {1}; def String func(String s) {'a'}; func('a')", String::class) }
	xtest { assertIsValidAndTypeConformsTo("def int func(int s) {1}; def String func(String s) {'a'}; func(1)", Integer::class) }
	
	xtest { assertIsValidAndTypeConformsTo("def static int func(int s) {1}; def static String func(String s) {'a'}; func('a')", String::class) }
	xtest { assertIsValidAndTypeConformsTo("def static int func(int s) {1}; def static String func(String s) {'a'}; func(1)", Integer::class) }
}  
xtest "inferred" {
	xtest { assertIsValidAndTypeConformsTo("def func {1}; func", Integer::class) } 
	xtest { assertIsValidAndTypeConformsTo("def static func {1}; func", Integer::class) } 
	xtest { assertIsValidAndTypeConformsTo("def func {'a'}; func", String::class) } 
	xtest { assertIsValidAndVoidType("def func {val a = 1}; func")} 
}
xtest "declared w/ type param" {
	xtest { assertIsValidAndTypeConformsTo("def <T> T func(T in) {in}; func(1)", Integer::class) } 
}
xtest "inferred w/ type param" {
	xtest { assertIsValidAndTypeConformsTo("def <T> func(T in) {in}; func(1)", Integer::class) } 
	xtest { assertIsValidAndTypeConformsTo("def <T> func(T in) {in}; func('a')", String::class) } 
}
xtest "inferred w/ type param, vararg" {
	xtest { assertIsValidAndTypeConformsToArray("def <T> func(T... in) {in}; func(1,2,3)", Integer::class) } 
}
// etc...