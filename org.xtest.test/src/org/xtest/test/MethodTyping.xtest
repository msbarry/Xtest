/* File-specific parameters */
runWhileEditing: false
// TODO - when Guice fixes memory leak, re-enable running on save
// (http://code.google.com/p/google-guice/issues/detail?id=288)
runOnSave: true
 
import static org.junit.Assert.*
import static extension org.^xtest.test.TestUtils.*

// First make sure that the custom type conformance assertion method works as expected 
xtest "type conformance utility tests" {
	xtest "assertIsValidAndTypeConformsTo" {
		xtest "simple success int" { 
			assertIsValidAndTypeConformsTo("1", Integer::class)
		}
		xtest "simple success int->number" { 
			assertIsValidAndTypeConformsTo("1", Number::class)
		}
		xtest "simple success string" { 
			assertIsValidAndTypeConformsTo("'s'", String::class)
		}
		xtest "validation error" { 
			assert assertIsValidAndTypeConformsTo("-", Integer::class) throws AssertionError
		}
		xtest "catches type mismatch" {
			assert assertIsValidAndTypeConformsTo("1", String::class) throws AssertionError
		}
	}
	
	
	xtest "assertIsValidAndVoidType" {
		xtest "simple success int" { 
			assertIsValidAndVoidType("val a = 1")
		}
		xtest "validation error" { 
			assert assertIsValidAndVoidType("val = 1") throws AssertionError
		}
		xtest "not void" { 
			assert assertIsValidAndVoidType("1") throws AssertionError
		}
	}
}

// Now use it to test method type computation
xtest "declared" {
	xtest { assertIsValidAndTypeConformsTo("def Integer func {1}; func", Integer::class) } 
	xtest { assertIsValidAndTypeConformsTo("def static Integer func {1}; func", Integer::class) } 
	xtest { assertIsValidAndTypeConformsTo("def String func {'a'}; func", String::class) } 
	xtest { assertIsValidAndVoidType("def void func {val a = 1}; func")} 
	xtest { assertIsValidAndVoidType("def void func {1}; func")} 
	xtest { assertIsValidAndVoidType("def void func {1}")} 
}
xtest "chooses correct method based on type when multiple names match" {
	xtest { assertIsValidAndTypeConformsTo("def int func(int s) {1}; def String func(String s) {'a'}; func('a')", String::class) }
	xtest { assertIsValidAndTypeConformsTo("def int func(int s) {1}; def String func(String s) {'a'}; func(1)", Integer::class) }
	
	xtest { assertIsValidAndTypeConformsTo("def static int func(int s) {1}; def static String func(String s) {'a'}; func('a')", String::class) }
	xtest { assertIsValidAndTypeConformsTo("def static int func(int s) {1}; def static String func(String s) {'a'}; func(1)", Integer::class) }
}  
xtest "inferred" {
	xtest { assertIsValidAndTypeConformsTo("def func {1}; func", Integer::class) } 
	xtest { assertIsValidAndTypeConformsTo("def static func {1}; func", Integer::class) } 
	xtest { assertIsValidAndTypeConformsTo("def func {'a'}; func", String::class) } 
	xtest { assertIsValidAndVoidType("def func {val a = 1}; func")} 
	xtest "recursive" {
		xtest { assertIsValidAndTypeConformsTo("def static r(int i) {i + r(i)}; r(1)", Integer::class)}
		xtest { assertIsValidAndTypeConformsTo("def static r(int i) {'' + i + r(i)}; r(1)", String::class)}
		xtest { assertIsValidAndTypeConformsTo("def static r(int i) {1L + i + r(i)}; r(1)", Long::class)}
		xtest { assertIsValidAndTypeConformsTo("def r(int i) {r(i)}; r(1)", Integer::class)}
	}
}
xtest "declared w/ type param" {
	xtest { assertIsValidAndTypeConformsTo("def <T> T func(T in) {in}; func(1)", Integer::class) } 
}
xtest "inferred w/ type param" {
	xtest { assertIsValidAndTypeConformsTo("def <T> func(T in) {in}; func(1)", Integer::class) } 
	xtest { assertIsValidAndTypeConformsTo("def <T> func(T in) {in}; func('a')", String::class) }
}
xtest "inferred w/ type param, vararg" {
	xtest { assertIsValidAndTypeConformsToArray("def <T> func(T... in) {in}; func(1,2,3)", Integer::class) } 
}
xtest "inferred w/ type param, vararg gets common supertype" {
	xtest { assertIsValidAndTypeConformsTo("def <T> i(T... s) {s.head}; i(1,2,3)", Integer::class) } 
	xtest { assertIsValidAndTypeConformsTo("def <T> i(T... s) {s.head}; i(1,'s')", Comparable::class) } 
	xtest { assertIsValidAndTypeConformsTo("def <T> i(T... s) {s.head}; i(1,2L)", Number::class) } 
	xtest { assertIsValidAndTypeConformsTo("def static <T> i(T... s) {s.head}; i(1,2L)", Number::class) } 
}

xtest "nested method type inference" {
	val script =
'def <T> get(T i) {
	def <U> get2(U j) {
		j
	}
	get2(i)
}

get(1)'
	assertIsValidAndTypeConformsTo(script, Integer::class)
}

xtest "nested method type inference - uses type paremeter from grandparent" {
	val script =
'def <T> get(T i) {
	def get2(T j) {
		j
	}
	get2(i)
}

get(1)'
	assertIsValidAndTypeConformsTo(script, Integer::class)
}

xtest "nested method type inference - uses var arg type paremeter from grandparent" {
	val script =
'def <K> get(K... i) {
	def get2(K... j) {
		j.head
	}
	get2(i)
}

get(1)'
	assertIsValidAndTypeConformsTo(script, Integer::class)
}

xtest "nested method type inference - uses var arg type paremeter from grandparent #2" {
	val script =
'def static <T> first(T... is) {is.get(0)}

def <T> get(T... i) {
	def get2(T... j) {
		first(j)
	}
	get2(i)
} 

get(1)'
	assertIsValidAndTypeConformsTo(script, Integer::class)
}

xtest "nested method type inference - uses var arg type paremeter from grandparent #3" {
	val script =
'def <T> get(T... i) {
	def get2(T... j) { j.get(0) }
	get2(i)
} 
get(1)'
	assertIsValidAndTypeConformsTo(script, Integer::class)
}

xtest "static method kills parent type scope" {
	val scriptGood = // inner method is local
'def <T> get(T... i) {
	def get2(T... j) {
		j.head
	}
	get2(i)
}

get(1)'
	val scriptBad = // inner method is static
'def <T> get(T... i) {
	def static get2(T... j) {
		j.head
	}
	get2(i)
}

get(1)'
	assertValidSyntax(scriptGood)
	assertInvalidSyntax(scriptBad)
}

xtest "operator overloading" {
	xtest {assertIsValidAndTypeConformsTo("def operator_plus(String a, String b) {a.length+b.length}; 'a'+'b'", Integer::class)}
	xtest {assertIsValidAndTypeConformsTo("def static operator_plus(String a, String b) {a.length+b.length}; 'a'+'b'", Integer::class)}
	xtest {assertIsValidAndTypeConformsTo("def <T extends Number> operator_plus(T a, T b) {a.intValue+b.intValue}; 1+1", Integer::class)}
	xtest {assertIsValidAndTypeConformsTo("def <T extends Number> operator_plus(T a, T b) {a.intValue+b.intValue}; 1L+1L", Long::class)}
}
