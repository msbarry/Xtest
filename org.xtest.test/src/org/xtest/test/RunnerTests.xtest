/* File-specific parameters */
runWhileEditing: false
// TODO - when Guice fixes memory leak, re-enable running on save
// (http://code.google.com/p/google-guice/issues/detail?id=288)
runOnSave: true
import org.^xtest.XTestRunner
import org.^xtest.results.XTestState

import static org.junit.Assert.*
import static org.^xtest.test.XTestRunnerUnitTests.*

xtest testCaseInAssert {
    val result = XTestRunner::run(
            "assert {if (0 == 1) true else {xtest b {assert false}\n true}}", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertTrue(!xTestSuiteResult.getEvaluationException().empty);
    assertEquals(XTestState::FAIL, xTestSuiteResult.getState());
    assertEquals("b", xTestSuiteResult.getQualifiedName());
    assertEquals(0, xTestSuiteResult.getSubTests().size());
}


xtest testEmptyTestCase {
    val result = XTestRunner::run("", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
    assertEquals(0, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());
}


xtest testExceptionInCaseInSuiteInSuite {
    val result = XTestRunner::run("xsuite suite {xtest tcase {print(1/0)}}", injector);
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals("[]", result.getErrorMessages().toString());
    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertEquals(XTestState::FAIL, xTestSuiteResult.getState());
    assertTrue(xTestSuiteResult.getEvaluationException().empty);
    assertEquals("suite", xTestSuiteResult.getQualifiedName());
    assertEquals(1, xTestSuiteResult.getSubTests().size());

    val xTestCaseResult = xTestSuiteResult.getSubTests().get(0);
    assertTrue(!xTestCaseResult.getEvaluationException().empty);
    assertEquals(XTestState::FAIL, xTestCaseResult.getState());
    assertEquals("suite.tcase", xTestCaseResult.getQualifiedName());
}


xtest testExtensionImport {
    assertXtestPasses("import static extension helpers.ExtensionMethods.*\nassert 1.incr == 2");
}


xtest testExtensionImportBad {
    assertXtestPreEvalFailure("import static helpers.ExtensionMethods.*\nassert 1.incr == 2");
}


xtest testFalseAssertInCaseInSuiteInSuite {
    val result = XTestRunner::run("xsuite suite {xtest tcase {assert 0==1}}", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertEquals(XTestState::FAIL, xTestSuiteResult.getState());
    assertEquals("suite", xTestSuiteResult.getQualifiedName());
    assertEquals(1, xTestSuiteResult.getSubTests().size());

    val xTestCaseResult = xTestSuiteResult.getSubTests().get(0);
    assertEquals(XTestState::FAIL, xTestCaseResult.getState());
    assertEquals("suite.tcase", xTestCaseResult.getQualifiedName());
}


xtest testImport_innerStaticClass_shouldPass {
    assertXtestPasses("import helpers.SUT$InnerClass\nxsuite suite {xtest tcase {assert SUT$InnerClass::innerField==1}}");
}


xtest testImportNonStatic {
    assertXtestPasses("import helpers.*\nxsuite suite {xtest tcase {assert SUT::getStatic==2}}");
}


xtest testImportStatic_innerClassMembers_shouldFail {
    assertXtestPreEvalFailure("import static helpers.SUT$InnerClass.nonStaticField\nxsuite suite {xtest tcase {assert nonStaticField==1}}");
    assertXtestPreEvalFailure("import static helpers.SUT$InnerClass.getNonStatic\nxsuite suite {xtest tcase {assert getNonStatic==1}}");
    assertXtestPreEvalFailure("import static helpers.SUT$InnerClass.*\nxsuite suite {xtest tcase {assert getNonStatic==1}}");
    assertXtestPreEvalFailure("import static helpers.SUT$InnerClass.*\nxsuite suite {xtest tcase {assert nonStaticField==1}}");
}


xtest testImportStatic_innerStaticClass_shouldFail {
    assertXtestPreEvalFailure("import static helpers.SUT$InnerClass\nxsuite suite {xtest tcase {assert innerField==1}}");
}


xtest testImportStatic_innerStaticClassWildcard {
    assertXtestPasses("import static helpers.SUT$InnerClass.*\nxsuite suite {xtest tcase {assert innerField==1}}");
    assertXtestPasses("import static helpers.SUT$InnerClass.*\nxsuite suite {xtest tcase {assert getStatic==1}}");
    // Try to use nonstatic
    assertXtestPreEvalFailure("import static helpers.SUT$InnerClass.*\nxsuite suite {xtest tcase {assert getNonStatic==1}}");
    assertXtestPreEvalFailure("import static helpers.SUT$InnerClass.*\nxsuite suite {xtest tcase {assert nonStaticField==1}}");
}


xtest testImportStatic_type_shouldfail {
    val result = XTestRunner::run(
            "import static helpers.SUT\nxsuite suite {xtest tcase {assert getStatic==2}}",
            injector);
    assertTrue(!"[]".equals(result.getErrorMessages().toString()));
    assertEquals(XTestState::FAIL, result.getState());
}


xtest testImportStatic_wildcard_shouldPass {
    val result = XTestRunner::run(
            "import static helpers.SUT.*\nxsuite suite {xtest tcase {assert getStatic==2}}",
            injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
}


xtest testInnerClassesRecognized {
    assertXtestPasses("import helpers.*\nxsuite suite {xtest tcase {assert SUT$InnerClass::innerField==1}}");
}


xtest testMalformed {
    val result = XTestRunner::run("testSui", injector);
    assertEquals(1, result.getErrorMessages().size());
    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(0, result.getSubTests().size());
    assertEquals(0, result.getSubTests().size());
}


xtest testPrivateFieldAccessible {
    assertXtestPasses("import helpers.*\nxsuite suite {val a = new PrivateMembers()\n"
            + "xtest tcase {a.i = 2\nassert a.i == 2}}");
}


xtest testPrivateInnerClassAccessible {
    assertXtestPasses("import helpers.*\nxsuite suite {val a = new PrivateMembers$Inner()\n"
            + "xtest tcase {assert a.c == 9}}");
}


xtest testPrivateMethodSugared {
    assertXtestPasses("import helpers.*\nxsuite suite {val a = new PrivateMembers()\n"
            + "xtest tcase {a.c = 2\nassert a.c == 1}}");
}


xtest testReturnDoesntFail {
    val result = XTestRunner::run("xtest test {\nreturn 1\n}", injector);
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals("[]", result.getErrorMessages().toString());
    assertEquals(XTestState::PASS, result.getState());
}


xtest testReturnStopsLaterTests {
    val result = XTestRunner::run("xtest test {\nif (1==1)return 1\nassert 1==0\n}",
            injector);
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals("[]", result.getErrorMessages().toString());
    assertEquals(XTestState::PASS, result.getState());
}


xtest testStaticMemberImportedWrite {
    assertXtestPasses("import helpers.*\nxsuite suite {StaticMembers::pub := 10\n"
            + "xtest tcase {assert StaticMembers::pub == 10}}");
}


xtest testStaticMemberTypeImportedWrite {
    assertXtestPasses("import static helpers.StaticMembers.*\nxsuite suite {pub := 11\n"
            + "xtest tcase {assert pub == 11}}");
}


xtest testStaticMemberWrite {
    assertXtestPasses("xsuite suite {helpers::StaticMembers::pub := 12\n"
            + "xtest tcase {assert helpers::StaticMembers::pub == 12}}");
}


xtest testTestInTestPasses {
    val result = XTestRunner::run("xtest toplevel {xtest inside {assert 1 == 1}}",
            injector);
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
}


xtest testThrowDivByZeroException {
    val result = XTestRunner::run(
            "xsuite suite {xtest tcase {assert 1/0 throws Exception}}", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertEquals(XTestState::PASS, xTestSuiteResult.getState());
    assertEquals("suite", xTestSuiteResult.getQualifiedName());
    assertEquals(1, xTestSuiteResult.getSubTests().size());

    val xTestCaseResult = xTestSuiteResult.getSubTests().get(0);
    assertEquals(XTestState::PASS, xTestCaseResult.getState());
    assertEquals("suite.tcase", xTestCaseResult.getQualifiedName());
    assertTrue(xTestCaseResult.getEvaluationException().empty);
}


xtest testThrowException {
    val result = XTestRunner
            ::run("xsuite suite {xtest tcase {assert throw new InterruptedException() throws InterruptedException}}",
                    injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertEquals(XTestState::PASS, xTestSuiteResult.getState());
    assertEquals("suite", xTestSuiteResult.getQualifiedName());
    assertEquals(1, xTestSuiteResult.getSubTests().size());

    val xTestCaseResult = xTestSuiteResult.getSubTests().get(0);
    assertEquals(XTestState::PASS, xTestCaseResult.getState());
    assertEquals("suite.tcase", xTestCaseResult.getQualifiedName());
}


xtest testThrowsWrongException {
    val result = XTestRunner
            ::run("xsuite suite {xtest tcase {assert throw new InterruptedException() throws IllegalArgumentException}}",
                    injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertEquals(XTestState::FAIL, xTestSuiteResult.getState());
    assertEquals("suite", xTestSuiteResult.getQualifiedName());
    assertEquals(1, xTestSuiteResult.getSubTests().size());

    val xTestCaseResult = xTestSuiteResult.getSubTests().get(0);
    assertEquals(XTestState::FAIL, xTestCaseResult.getState());
    assertEquals("suite.tcase", xTestCaseResult.getQualifiedName());
}


xtest testTopLevelAssert {
    val result = XTestRunner::run("assert false", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(!result.getEvaluationException().isEmpty);
    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(0, result.getSubTests().size());
}


xtest testTopLevelTestCaseFails {
    val result = XTestRunner::run("xtest toplevel {\nassert 1!=1\n}", injector);
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals("[]", result.getErrorMessages().toString());
    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(1, result.getSubTests().size());
}


xtest testTopLevelTestCasePasses {
    val result = XTestRunner::run("xtest toplevel {\nassert 1==1\n}", injector);
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals("[]", result.getErrorMessages().toString());
    assertEquals(XTestState::PASS, result.getState());
    assertEquals(1, result.getSubTests().size());
}


xtest testTrueAssertInCaseInSuiteInSuite {
    val result = XTestRunner::run("xsuite suite {xtest tcase {assert 1==1}}", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertTrue(xTestSuiteResult.getEvaluationException().empty);
    assertEquals(XTestState::PASS, xTestSuiteResult.getState());
    assertEquals("suite", xTestSuiteResult.getQualifiedName());
    assertEquals(1, xTestSuiteResult.getSubTests().size());

    val xTestCaseResult = xTestSuiteResult.getSubTests().get(0);
    assertTrue(xTestCaseResult.getEvaluationException().empty);
    assertEquals(XTestState::PASS, xTestCaseResult.getState());
    assertEquals("suite.tcase", xTestCaseResult.getQualifiedName());
}


xtest testWarningIsOk {
    val result = XTestRunner::run("val a = 1", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertEquals(XTestState::PASS, result.getState());
}


xtest throwExceptionBeforeTestSuite {
    val result = XTestRunner::run(
            "println(1/0); xsuite suite {xtest tcase {assert 1/0 throws Exception}}", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(!result.getEvaluationException().empty);
    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(0, result.getSubTests().size());
    assertEquals(0, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());
}


xtest throwExceptionInsideTestSuite {
    val result = XTestRunner::run(
            "xsuite suite {println(1/0); xtest tcase {assert 1/0 throws Exception}}", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);

    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertTrue(!xTestSuiteResult.getEvaluationException().empty);
    assertEquals("[]", xTestSuiteResult.getErrorMessages().toString());
    assertTrue(!xTestSuiteResult.getEvaluationException().empty);

    assertEquals(XTestState::FAIL, xTestSuiteResult.getState());
    assertEquals("suite", xTestSuiteResult.getQualifiedName());
    assertEquals(0, xTestSuiteResult.getSubTests().size());
}


xtest useSUT {
    val result = XTestRunner::run(
            "xsuite suite {xtest tcase {assert new helpers.SUT().get2 == 2}}", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);

    assertEquals(XTestState::PASS, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertTrue(xTestSuiteResult.getEvaluationException().empty);
    assertEquals("[]", xTestSuiteResult.getErrorMessages().toString());

    assertEquals(XTestState::PASS, xTestSuiteResult.getState());
    assertEquals("suite", xTestSuiteResult.getQualifiedName());
    assertEquals(1, xTestSuiteResult.getSubTests().size());
 
    val caseResult = xTestSuiteResult.getSubTests().get(0);
    assertTrue(caseResult.getEvaluationException().empty);
    assertEquals("suite.tcase", caseResult.getQualifiedName());
    assertEquals(XTestState::PASS, caseResult.getState());
}


xtest useSUTFail {
    val result = XTestRunner::run(
            "xsuite suite {xtest tcase {assert new helpers.SUT().get2 == 3}}", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);

    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertTrue(xTestSuiteResult.getEvaluationException().empty);
    assertEquals("[]", xTestSuiteResult.getErrorMessages().toString());

    assertEquals(XTestState::FAIL, xTestSuiteResult.getState());
    assertEquals("suite", xTestSuiteResult.getQualifiedName());
    assertEquals(1, xTestSuiteResult.getSubTests().size());

    val caseResult = xTestSuiteResult.getSubTests().get(0);
    assertTrue(!caseResult.getEvaluationException().empty);
    assertEquals("suite.tcase", caseResult.getQualifiedName());
    assertEquals(XTestState::FAIL, caseResult.getState());
}


xtest xsuiteInSuite {
    val result = XTestRunner::run("xsuite suite {1}", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertEquals(0, xTestSuiteResult.getSubTests().size());
}


xtest xtestInSuiteInSuite {
    val result = XTestRunner::run("xsuite suite {xtest tcase {1}}", injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
    assertEquals(1, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());

    val xTestSuiteResult = result.getSubTests().get(0);
    assertEquals(XTestState::PASS, xTestSuiteResult.getState());
    assertEquals("suite", xTestSuiteResult.getQualifiedName());
    assertEquals(1, xTestSuiteResult.getSubTests().size());

    val xTestCaseResult = xTestSuiteResult.getSubTests().get(0);
    assertEquals(XTestState::PASS, xTestCaseResult.getState());
    assertEquals("suite.tcase", xTestCaseResult.getQualifiedName());
} 


xtest testVerifyExpression {
    val result = XTestRunner::run('
?assert 1 == 2
?assert 1+1 throws Exception
', injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(0, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());
    assertEquals(2, result.evaluationException.size);
}


xtest testSafeExpressionGuardsExceptions {
    val result = XTestRunner::run('
?1/0
?1/0
', injector);
    assertEquals("[]", result.getErrorMessages().toString());
    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(0, result.getSubTests().size());
    assertEquals("", result.getQualifiedName());
    assertEquals(2, result.evaluationException.size);
}


xtest allowStringDescription {
    val result = XTestRunner::run('
xtest "string description" {assert true}
', injector);
    assertEquals("string description", result.getSubTests.get(0).getName);
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
}


xtest allowNoDesciption {
    val result = XTestRunner::run('
xtest {assert true}
', injector);
    assertEquals("assert true", result.getSubTests.get(0).getName);
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
}

xtest allowNoDesciptionOnlyTakesFirstLine {
    val result = XTestRunner::run('
xtest {assert true 
assert true}
', injector);
    assertEquals("assert true", result.getSubTests.get(0).getName);
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
}

xtest allowNoDesciptionIgnoresPrecedingWhitespace {
    val result = XTestRunner::run('
xtest {
  
assert true 
assert true}
', injector);
    assertEquals("assert true", result.getSubTests.get(0).getName);
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
}

xtest allowNoDesciptionAndParenthesis {
    val result = XTestRunner::run('
xtest (1) {assert true 
assert true}
', injector);
    assertEquals("1", result.getSubTests.get(0).getName);
    assertTrue(result.getEvaluationException().isEmpty);
    assertEquals(XTestState::PASS, result.getState());
}

xtest "return after caught exception doesnt pass" {
    val result = XTestRunner::run('
?assert false
return true
', injector);
    assertEquals(XTestState::FAIL, result.getState());
}

xtest "return after caught exception in subtest doesnt pass" {
    val result = XTestRunner::run('
xtest {
?assert false
return true
}', injector);
    assertEquals(XTestState::FAIL, result.getState());
    assertEquals(XTestState::FAIL, result.getSubTests.head.getState());
}