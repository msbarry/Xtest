runWhileEditing: false
import static XTestState.*
import com.google.common.collect.Lists
import org.^xtest.results.XTestResult
import org.^xtest.results.XTestState

def static shouldBeFailing(XTestResult result) { assert result.getState() == XTestState::FAIL }
def static shouldBePassing(XTestResult result) { assert result.getState() == XTestState::PASS }
def static shouldBePending(XTestResult result) { assert result.getState() == XTestState::NOT_RUN }

xtest test2CasesInSuiteFailPass {
    val suite = new XTestResult(null)
    val test = suite.subTest("test", null)
    val xtest2 = suite.subTest("test2", null)
    test.fail()
    xtest2.pass()
    test.shouldBeFailing
    xtest2.shouldBePassing
    suite.shouldBeFailing
}

xtest test2CasesInSuitePassFail {
    val suite = new XTestResult(null)
    val test = suite.subTest("test", null)
    val xtest2 = suite.subTest("test2", null)
    test.pass()
    xtest2.fail()
    test.shouldBePassing
    xtest2.shouldBeFailing
    suite.shouldBeFailing
}

xtest testEmptySuiteFail {
    val suite = new XTestResult(null)
    suite.fail()
    suite.shouldBeFailing
}

xtest testEmptySuitePass {
    val suite = new XTestResult(null)
    suite.pass()
    suite.shouldBePassing
}

xtest testEmptySuiteResult {
    val suite = new XTestResult(null)
    suite.shouldBePending
    assert suite.getName() == null
    assert suite.getQualifiedName() == ""
    assert suite.getSubTests.size() == 0
}

xtest testSyntaxError {
    val suite = new XTestResult(null)
    suite.addSyntaxError("Syntax Error")
    suite.shouldBeFailing
    assert suite.getErrorMessages().toString() == Lists::newArrayList("Syntax Error").toString()
}

xtest xsuiteInSuite {
    val parent = new XTestResult(null)
    val child = parent.subTest("test", null)
    assert child.getName() == "test"
    assert child.getQualifiedName() == "test"
    child.shouldBePending
    assert child.getSubTests.size == 0
    parent.shouldBePending
    assert parent.getSubTests.size() == 1
}


xtest xtestInSuite {
    val parent = new XTestResult(null)
    val child = parent.subTest("test", null)
    assert child.getName() == "test"
    assert child.getQualifiedName() == "test"
    child.shouldBePending
    parent.shouldBePending
    assert parent.getSubTests.size() == 1
}


xtest xtestInSuiteFail {
    val suite = new XTestResult(null)
    val test = suite.subTest("test", null)
    test.fail()
    test.shouldBeFailing
    suite.shouldBeFailing
}


xtest xtestInSuiteInSuite {
    val parent = new XTestResult(null)
    val child = parent.subTest("test", null)
    val grandChild = child.subTest("test2", null)
    assert child.getQualifiedName() == "test"
    assert grandChild.getQualifiedName() == "test.test2"
    child.shouldBePending
    parent.shouldBePending
    grandChild.shouldBePending
    assert parent.getSubTests.size == 1
    assert child.getSubTests.size == 1
}


xtest xtestInSuiteInSuiteFail {
    val parent = new XTestResult(null)
    val child = parent.subTest("test", null)
    val grandChild = child.subTest("test2", null)
    grandChild.fail()
    child.shouldBeFailing
    parent.shouldBeFailing
    grandChild.shouldBeFailing
}


xtest xtestInSuiteInSuitePass {
    val parent = new XTestResult(null)
    val child = parent.subTest("test", null)
    val grandChild = child.subTest("test2", null)
    grandChild.pass()
    child.shouldBePassing
    parent.shouldBePassing
    grandChild.shouldBePassing
}


xtest xtestInSuitePass {
    val suite = new XTestResult(null)
    val test = suite.subTest("test", null)
    test.pass()
    test.shouldBePassing
    suite.shouldBePassing
}


xtest "pass a test after failing it leaves in failing state" {
    val suite = new XTestResult(null)
    suite.fail()
    suite.pass()
    suite.shouldBeFailing
}

xtest "1 test" {
	val suite = new XTestResult(null)
	assert suite.countTests == 1
}

xtest "2 tests" {
	val suite = new XTestResult(null)
	suite.subTest("sub", null)
	assert suite.countTests == 2
}

xtest "no failure" {
	val suite = new XTestResult(null)
	assert suite.countFailures == 0
}

xtest "1 failures" {
	val suite = new XTestResult(null)
	suite.fail
	assert suite.countFailures == 1
}

xtest "1 failure - in subtest" {
	val suite = new XTestResult(null)
	suite.subTest("sub",null).fail
	assert suite.countFailures == 1
}

xtest "Failed parent and child" {
	val suite = new XTestResult(null)
	suite.subTest("sub",null).fail
	suite.fail
	assert suite.countFailures == 2
}

xtest "Pending child" {
	val suite = new XTestResult(null)
	val sub = suite.subTest("sub",null)
	sub.setPending
	assert !suite.isPending
	assert sub.isPending
	assert suite.countPendings == 1
}

xtest "line break omitted from name" {
    val test = new XTestResult(null).subTest("te\nst", null)
	assert test.getName == "test"
}