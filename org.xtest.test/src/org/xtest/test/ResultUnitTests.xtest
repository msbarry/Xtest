import static org.junit.Assert.*

import org.^xtest.results.XTestState
import org.^xtest.results.XTestResult

import com.google.common.collect.Lists

xtest test2CasesInSuiteFailPass {
    val suite = new org.^xtest.results.XTestResult(null)
    val test = suite.subTest("test", null)
    val xtest2 = suite.subTest("test2", null)
    test.fail()
    xtest2.pass()
    assertEquals(XTestState::FAIL, test.getState())
    assertEquals(XTestState::PASS, xtest2.getState())
    assertEquals(XTestState::FAIL, suite.getState())
}

xtest test2CasesInSuitePassFail {
    val suite = new org.^xtest.results.XTestResult(null)
    val test = suite.subTest("test", null)
    val xtest2 = suite.subTest("test2", null)
    test.pass()
    xtest2.fail()
    assertEquals(XTestState::PASS, test.getState())
    assertEquals(XTestState::FAIL, xtest2.getState())
    assertEquals(XTestState::FAIL, suite.getState())
}

xtest testEmptySuiteFail {
    val suite = new org.^xtest.results.XTestResult(null)
    suite.fail()
    assertEquals(XTestState::FAIL, suite.getState())
}

xtest testEmptySuitePass {
    val suite = new org.^xtest.results.XTestResult(null)
    suite.pass()
    assertEquals(XTestState::PASS, suite.getState())
}

xtest testEmptySuiteResult {
    val suite = new org.^xtest.results.XTestResult(null)
    assertEquals(XTestState::NOT_RUN, suite.getState())
    assertEquals(null, suite.getName())
    assertEquals("", suite.getQualifiedName())
    assertEquals(0, suite.getSubTests.size())
}

xtest testSyntaxError {
    val suite = new org.^xtest.results.XTestResult(null)
    suite.addSyntaxError("Syntax Error")
    assertEquals(XTestState::FAIL, suite.getState())
    assertEquals(Lists::newArrayList("Syntax Error").toString(), suite.getErrorMessages().toString())
}

xtest xsuiteInSuite {
    val parent = new org.^xtest.results.XTestResult(null)
    val child = parent.subTest("test", null)
    assertEquals("test", child.getName())
    assertEquals("test", child.getQualifiedName())
    assertEquals(XTestState::NOT_RUN, child.getState())
    assertEquals(0, child.getSubTests.size)
    assertEquals(XTestState::NOT_RUN, parent.getState())
    assertEquals(1, parent.getSubTests.size())
}


xtest xtestInSuite {
    val parent = new org.^xtest.results.XTestResult(null)
    val child = parent.subTest("test", null)
    assertEquals("test", child.getName())
    assertEquals("test", child.getQualifiedName())
    assertEquals(XTestState::NOT_RUN, child.getState())
    assertEquals(XTestState::NOT_RUN, parent.getState())
    assertEquals(1, parent.getSubTests.size())
}


xtest xtestInSuiteFail {
    val suite = new org.^xtest.results.XTestResult(null)
    val test = suite.subTest("test", null)
    test.fail()
    assertEquals(XTestState::FAIL, test.getState())
    assertEquals(XTestState::FAIL, suite.getState())
}


xtest xtestInSuiteInSuite {
    val parent = new org.^xtest.results.XTestResult(null)
    val child = parent.subTest("test", null)
    val grandChild = child.subTest("test2", null)
    assertEquals("test", child.getQualifiedName())
    assertEquals("test.test2", grandChild.getQualifiedName())
    assertEquals(XTestState::NOT_RUN, child.getState())
    assertEquals(XTestState::NOT_RUN, parent.getState())
    assertEquals(XTestState::NOT_RUN, grandChild.getState())
    assertEquals(1, parent.getSubTests.size)
    assertEquals(1, child.getSubTests.size)
}


xtest xtestInSuiteInSuiteFail {
    val parent = new org.^xtest.results.XTestResult(null)
    val child = parent.subTest("test", null)
    val grandChild = child.subTest("test2", null)
    grandChild.fail()
    assertEquals(XTestState::FAIL, child.getState())
    assertEquals(XTestState::FAIL, parent.getState())
    assertEquals(XTestState::FAIL, grandChild.getState())
}


xtest xtestInSuiteInSuitePass {
    val parent = new org.^xtest.results.XTestResult(null)
    val child = parent.subTest("test", null)
    val grandChild = child.subTest("test2", null)
    grandChild.pass()
    assertEquals(XTestState::PASS, child.getState())
    assertEquals(XTestState::PASS, parent.getState())
    assertEquals(XTestState::PASS, grandChild.getState())
}


xtest xtestInSuitePass {
    val suite = new org.^xtest.results.XTestResult(null)
    val test = suite.subTest("test", null)
    test.pass()
    assertEquals(XTestState::PASS, test.getState())
    assertEquals(XTestState::PASS, suite.getState())
}
